diff --git a/src/Security/QueryParamsAuthenticator.php b/src/Security/QueryParamsAuthenticator.php
index bea9107..d95a3be 100644
--- a/src/Security/QueryParamsAuthenticator.php
+++ b/src/Security/QueryParamsAuthenticator.php
@@ -2,10 +2,12 @@
 
 namespace App\Security;
 
+use App\Repository\UserRepository;
 use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\HttpFoundation\Response;
 use Symfony\Component\Security\Core\Authentication\Token\TokenInterface;
 use Symfony\Component\Security\Core\Exception\AuthenticationException;
+use Symfony\Component\Security\Core\Exception\UserNotFoundException;
 use Symfony\Component\Security\Http\Authenticator\AbstractAuthenticator;
 use Symfony\Component\Security\Http\Authenticator\AuthenticatorInterface;
 use Symfony\Component\Security\Http\Authenticator\Passport\Badge\UserBadge;
@@ -14,6 +16,13 @@ use Symfony\Component\Security\Http\Authenticator\Passport\Passport;
 
 class QueryParamsAuthenticator extends AbstractAuthenticator
 {
+    private UserRepository $userRepository;
+
+    public function __construct(UserRepository $userRepository)
+    {
+        $this->userRepository = $userRepository;
+    }
+
     public function supports(Request $request): ?bool
     {
         return $request->query->has('email')
@@ -26,7 +35,15 @@ class QueryParamsAuthenticator extends AbstractAuthenticator
         $password = $request->query->get('password', '');
 
         return new Passport(
-            new UserBadge($email),
+            new UserBadge($email, function(string $email) {
+                $user = $this->userRepository->findOneBy(['email' => $email]);
+
+                if (!$user) {
+                    throw new UserNotFoundException();
+                }
+
+                return $user;
+            }),
             new PasswordCredentials($password)
         );
     }
