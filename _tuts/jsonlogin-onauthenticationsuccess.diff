diff --git a/src/Security/JsonLoginAuthenticator.php b/src/Security/JsonLoginAuthenticator.php
index 76c63c2..12f70b3 100644
--- a/src/Security/JsonLoginAuthenticator.php
+++ b/src/Security/JsonLoginAuthenticator.php
@@ -2,7 +2,9 @@
 
 namespace App\Security;
 
+use App\Entity\User;
 use App\Repository\UserRepository;
+use Lcobucci\JWT\Configuration;
 use Symfony\Component\HttpFoundation\JsonResponse;
 use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\HttpFoundation\Response;
@@ -18,10 +20,12 @@ use Symfony\Component\Security\Http\Authenticator\Passport\Passport;
 class JsonLoginAuthenticator extends AbstractAuthenticator
 {
     private UserRepository $userRepository;
+    private Configuration $configuration;
 
-    public function __construct(UserRepository $userRepository)
+    public function __construct(UserRepository $userRepository, Configuration $configuration)
     {
         $this->userRepository = $userRepository;
+        $this->configuration = $configuration;
     }
 
     public function supports(Request $request): ?bool
@@ -51,7 +55,26 @@ class JsonLoginAuthenticator extends AbstractAuthenticator
 
     public function onAuthenticationSuccess(Request $request, TokenInterface $token, string $firewallName): ?Response
     {
-        dd('success', $token);
+        $user = $token->getUser();
+        if (!$user instanceof User) {
+            throw new \RuntimeException('Invalid user');
+        }
+
+        $now = new \DateTimeImmutable();
+
+        $jwt = $this->configuration->builder()
+            ->issuedAt($now)
+            ->expiresAt($now->modify('+ 15 minutes'))
+            ->canOnlyBeUsedAfter($now->modify('+ 1 second'))
+            ->issuedBy('https://localhost')
+            ->permittedFor('https://localhost', 'https://example.com')
+            ->relatedTo($user->getEmail())
+            ->getToken(
+                $this->configuration->signer(),
+                $this->configuration->signingKey()
+            );
+
+        return new JsonResponse(['token' => $jwt->toString()]);
     }
 
     public function onAuthenticationFailure(Request $request, AuthenticationException $exception): ?Response
